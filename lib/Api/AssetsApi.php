<?php
/**
 * AssetsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AssetsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssetsApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost:10010/1');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return AssetsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * addAssetToNode
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param string $id id identifying a domain model (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param string $asset_id id of an asset (required)
     * @return \Swagger\Client\Model\AssetBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addAssetToNode($namespace, $type, $id, $asset_type, $asset_id)
    {
        list($response, $statusCode, $httpHeader) = $this->addAssetToNodeWithHttpInfo ($namespace, $type, $id, $asset_type, $asset_id);
        return $response; 
    }


    /**
     * addAssetToNodeWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param string $id id identifying a domain model (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param string $asset_id id of an asset (required)
     * @return Array of \Swagger\Client\Model\AssetBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addAssetToNodeWithHttpInfo($namespace, $type, $id, $asset_type, $asset_id)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling addAssetToNode');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling addAssetToNode');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addAssetToNode');
        }
        // verify the required parameter 'asset_type' is set
        if ($asset_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_type when calling addAssetToNode');
        }
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling addAssetToNode');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}/assets/{assetType}/{assetId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($asset_type !== null) {
            $resourcePath = str_replace(
                "{" . "assetType" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_type),
                $resourcePath
            );
        }// path params
        
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "assetId" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\AssetBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\AssetBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AssetBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteAsset
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $asset_id id of an asset (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAsset($namespace, $asset_id, $asset_type)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteAssetWithHttpInfo ($namespace, $asset_id, $asset_type);
        return $response; 
    }


    /**
     * deleteAssetWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $asset_id id of an asset (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAssetWithHttpInfo($namespace, $asset_id, $asset_type)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteAsset');
        }
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling deleteAsset');
        }
        // verify the required parameter 'asset_type' is set
        if ($asset_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_type when calling deleteAsset');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/assets/{assetType}/{assetId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "assetId" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }// path params
        
        if ($asset_type !== null) {
            $resourcePath = str_replace(
                "{" . "assetType" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteAssets
     *
     * Delete assets
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAssets($namespace)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteAssetsWithHttpInfo ($namespace);
        return $response; 
    }


    /**
     * deleteAssetsWithHttpInfo
     *
     * Delete assets
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAssetsWithHttpInfo($namespace)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteAssets');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/assets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAsset
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param string $asset_id id of an asset (required)
     * @return \Swagger\Client\Model\AssetBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAsset($namespace, $asset_type, $asset_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getAssetWithHttpInfo ($namespace, $asset_type, $asset_id);
        return $response; 
    }


    /**
     * getAssetWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param string $asset_id id of an asset (required)
     * @return Array of \Swagger\Client\Model\AssetBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAssetWithHttpInfo($namespace, $asset_type, $asset_id)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling getAsset');
        }
        // verify the required parameter 'asset_type' is set
        if ($asset_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_type when calling getAsset');
        }
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling getAsset');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/assets/{assetType}/{assetId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($asset_type !== null) {
            $resourcePath = str_replace(
                "{" . "assetType" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_type),
                $resourcePath
            );
        }// path params
        
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "assetId" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\AssetBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\AssetBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AssetBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAssetsInNode
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param string $id id identifying a domain model (required)
     * @param string[] $filter_asset_type type of asset to return. This filters the results by asset type, but returns all the assets associated with the result. (optional)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return \Swagger\Client\Model\AssetResultSet
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAssetsInNode($namespace, $type, $id, $filter_asset_type = null, $offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAssetsInNodeWithHttpInfo ($namespace, $type, $id, $filter_asset_type, $offset, $limit);
        return $response; 
    }


    /**
     * getAssetsInNodeWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param string $id id identifying a domain model (required)
     * @param string[] $filter_asset_type type of asset to return. This filters the results by asset type, but returns all the assets associated with the result. (optional)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return Array of \Swagger\Client\Model\AssetResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAssetsInNodeWithHttpInfo($namespace, $type, $id, $filter_asset_type = null, $offset = null, $limit = null)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling getAssetsInNode');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling getAssetsInNode');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAssetsInNode');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}/assets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($filter_asset_type)) {
            $filter_asset_type = $this->apiClient->getSerializer()->serializeCollection($filter_asset_type, 'csv', true);
        }
        
        if ($filter_asset_type !== null) {
            $queryParams['filter[assetType]'] = $this->apiClient->getSerializer()->toQueryValue($filter_asset_type);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\AssetResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\AssetResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AssetResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * removeAssetFromNode
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param string $id id identifying a domain model (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param string $asset_id id of an asset (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeAssetFromNode($namespace, $type, $id, $asset_type, $asset_id)
    {
        list($response, $statusCode, $httpHeader) = $this->removeAssetFromNodeWithHttpInfo ($namespace, $type, $id, $asset_type, $asset_id);
        return $response; 
    }


    /**
     * removeAssetFromNodeWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param string $id id identifying a domain model (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param string $asset_id id of an asset (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeAssetFromNodeWithHttpInfo($namespace, $type, $id, $asset_type, $asset_id)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling removeAssetFromNode');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling removeAssetFromNode');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeAssetFromNode');
        }
        // verify the required parameter 'asset_type' is set
        if ($asset_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_type when calling removeAssetFromNode');
        }
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling removeAssetFromNode');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}/assets/{assetType}/{assetId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($asset_type !== null) {
            $resourcePath = str_replace(
                "{" . "assetType" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_type),
                $resourcePath
            );
        }// path params
        
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "assetId" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * replaceAsset
     *
     * Replaces the Asset with the data sent in the body
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $asset_id id of an asset (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param \Swagger\Client\Model\AssetBody $body asset (optional)
     * @return \Swagger\Client\Model\AssetBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function replaceAsset($namespace, $asset_id, $asset_type, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->replaceAssetWithHttpInfo ($namespace, $asset_id, $asset_type, $body);
        return $response; 
    }


    /**
     * replaceAssetWithHttpInfo
     *
     * Replaces the Asset with the data sent in the body
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $asset_id id of an asset (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param \Swagger\Client\Model\AssetBody $body asset (optional)
     * @return Array of \Swagger\Client\Model\AssetBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function replaceAssetWithHttpInfo($namespace, $asset_id, $asset_type, $body = null)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceAsset');
        }
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling replaceAsset');
        }
        // verify the required parameter 'asset_type' is set
        if ($asset_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_type when calling replaceAsset');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/assets/{assetType}/{assetId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "assetId" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }// path params
        
        if ($asset_type !== null) {
            $resourcePath = str_replace(
                "{" . "assetType" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\AssetBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\AssetBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AssetBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * searchAssets
     *
     * Search assets
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @param string[] $include comma separated list of elements to hydrate. Can include children, parents, nodes, and/or assets (optional)
     * @param string[] $filter_node limit to assets that are related to a node matching type/code (optional)
     * @param string[] $filter_asset_type type of asset to return. This filters the results by asset type, but returns all the assets associated with the result. (optional)
     * @return \Swagger\Client\Model\AssetResultSet
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function searchAssets($namespace, $offset = null, $limit = null, $include = null, $filter_node = null, $filter_asset_type = null)
    {
        list($response, $statusCode, $httpHeader) = $this->searchAssetsWithHttpInfo ($namespace, $offset, $limit, $include, $filter_node, $filter_asset_type);
        return $response; 
    }


    /**
     * searchAssetsWithHttpInfo
     *
     * Search assets
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @param string[] $include comma separated list of elements to hydrate. Can include children, parents, nodes, and/or assets (optional)
     * @param string[] $filter_node limit to assets that are related to a node matching type/code (optional)
     * @param string[] $filter_asset_type type of asset to return. This filters the results by asset type, but returns all the assets associated with the result. (optional)
     * @return Array of \Swagger\Client\Model\AssetResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function searchAssetsWithHttpInfo($namespace, $offset = null, $limit = null, $include = null, $filter_node = null, $filter_asset_type = null)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling searchAssets');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/assets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }// query params
        
        if (is_array($filter_node)) {
            $filter_node = $this->apiClient->getSerializer()->serializeCollection($filter_node, 'csv', true);
        }
        
        if ($filter_node !== null) {
            $queryParams['filter[node]'] = $this->apiClient->getSerializer()->toQueryValue($filter_node);
        }// query params
        
        if (is_array($filter_asset_type)) {
            $filter_asset_type = $this->apiClient->getSerializer()->serializeCollection($filter_asset_type, 'csv', true);
        }
        
        if ($filter_asset_type !== null) {
            $queryParams['filter[assetType]'] = $this->apiClient->getSerializer()->toQueryValue($filter_asset_type);
        }
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\AssetResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\AssetResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AssetResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
