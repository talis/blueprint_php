<?php
/**
 * HierarchyApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * HierarchyApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HierarchyApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost:10010/1');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return HierarchyApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * addNode
     *
     * 
     *
     * @param string $namespace_inc_global identifier namespacing the blueprint. `global` is a special namespace which references data from all blueprints in the call. (required)
     * @param \Swagger\Client\Model\NodeBody $body node (required)
     * @return \Swagger\Client\Model\NodeBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addNode($namespace_inc_global, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->addNodeWithHttpInfo ($namespace_inc_global, $body);
        return $response; 
    }


    /**
     * addNodeWithHttpInfo
     *
     * 
     *
     * @param string $namespace_inc_global identifier namespacing the blueprint. `global` is a special namespace which references data from all blueprints in the call. (required)
     * @param \Swagger\Client\Model\NodeBody $body node (required)
     * @return Array of \Swagger\Client\Model\NodeBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addNodeWithHttpInfo($namespace_inc_global, $body)
    {
        
        // verify the required parameter 'namespace_inc_global' is set
        if ($namespace_inc_global === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace_inc_global when calling addNode');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addNode');
        }
  
        // parse inputs
        $resourcePath = "/{namespaceIncGlobal}/nodes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace_inc_global !== null) {
            $resourcePath = str_replace(
                "{" . "namespaceIncGlobal" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace_inc_global),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\NodeBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\NodeBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * bulkUpload
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function bulkUpload($namespace)
    {
        list($response, $statusCode, $httpHeader) = $this->bulkUploadWithHttpInfo ($namespace);
        return $response; 
    }


    /**
     * bulkUploadWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function bulkUploadWithHttpInfo($namespace)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling bulkUpload');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes.csv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('text/plain','application/octet-stream'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteNode
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $id id identifying a domain model (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteNode($namespace, $id, $type)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteNodeWithHttpInfo ($namespace, $id, $type);
        return $response; 
    }


    /**
     * deleteNodeWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $id id identifying a domain model (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteNodeWithHttpInfo($namespace, $id, $type)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteNode');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteNode');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling deleteNode');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteNodes
     *
     * Delete nodes
     *
     * @param string $namespace_inc_global identifier namespacing the blueprint. `global` is a special namespace which references data from all blueprints in the call. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteNodes($namespace_inc_global)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteNodesWithHttpInfo ($namespace_inc_global);
        return $response; 
    }


    /**
     * deleteNodesWithHttpInfo
     *
     * Delete nodes
     *
     * @param string $namespace_inc_global identifier namespacing the blueprint. `global` is a special namespace which references data from all blueprints in the call. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteNodesWithHttpInfo($namespace_inc_global)
    {
        
        // verify the required parameter 'namespace_inc_global' is set
        if ($namespace_inc_global === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace_inc_global when calling deleteNodes');
        }
  
        // parse inputs
        $resourcePath = "/{namespaceIncGlobal}/nodes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace_inc_global !== null) {
            $resourcePath = str_replace(
                "{" . "namespaceIncGlobal" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace_inc_global),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * exportHierarchy
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function exportHierarchy($namespace)
    {
        list($response, $statusCode, $httpHeader) = $this->exportHierarchyWithHttpInfo ($namespace);
        return $response; 
    }


    /**
     * exportHierarchyWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function exportHierarchyWithHttpInfo($namespace)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling exportHierarchy');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes.csv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAncestors
     *
     * Get ancestor nodes
     *
     * @param string $id id identifying a domain model (required)
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return \Swagger\Client\Model\NodeResultSet
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAncestors($id, $namespace, $type, $offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAncestorsWithHttpInfo ($id, $namespace, $type, $offset, $limit);
        return $response; 
    }


    /**
     * getAncestorsWithHttpInfo
     *
     * Get ancestor nodes
     *
     * @param string $id id identifying a domain model (required)
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return Array of \Swagger\Client\Model\NodeResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAncestorsWithHttpInfo($id, $namespace, $type, $offset = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAncestors');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling getAncestors');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling getAncestors');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}/ancestors";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\NodeResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\NodeResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getChildren
     *
     * Get child nodes
     *
     * @param string $id id identifying a domain model (required)
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return \Swagger\Client\Model\NodeResultSet
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getChildren($id, $namespace, $type, $offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getChildrenWithHttpInfo ($id, $namespace, $type, $offset, $limit);
        return $response; 
    }


    /**
     * getChildrenWithHttpInfo
     *
     * Get child nodes
     *
     * @param string $id id identifying a domain model (required)
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return Array of \Swagger\Client\Model\NodeResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getChildrenWithHttpInfo($id, $namespace, $type, $offset = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getChildren');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling getChildren');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling getChildren');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}/children";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\NodeResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\NodeResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getDescendants
     *
     * Get descendant nodes
     *
     * @param string $id id identifying a domain model (required)
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return \Swagger\Client\Model\NodeResultSet
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getDescendants($id, $namespace, $type, $offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getDescendantsWithHttpInfo ($id, $namespace, $type, $offset, $limit);
        return $response; 
    }


    /**
     * getDescendantsWithHttpInfo
     *
     * Get descendant nodes
     *
     * @param string $id id identifying a domain model (required)
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return Array of \Swagger\Client\Model\NodeResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getDescendantsWithHttpInfo($id, $namespace, $type, $offset = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getDescendants');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling getDescendants');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling getDescendants');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}/descendants";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\NodeResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\NodeResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getNode
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $id id identifying a domain model (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param string[] $include comma separated list of elements to hydrate. Can include children, parents, nodes, and/or assets (optional)
     * @return \Swagger\Client\Model\NodeBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getNode($namespace, $id, $type, $include = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getNodeWithHttpInfo ($namespace, $id, $type, $include);
        return $response; 
    }


    /**
     * getNodeWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $id id identifying a domain model (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param string[] $include comma separated list of elements to hydrate. Can include children, parents, nodes, and/or assets (optional)
     * @return Array of \Swagger\Client\Model\NodeBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getNodeWithHttpInfo($namespace, $id, $type, $include = null)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling getNode');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getNode');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling getNode');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\NodeBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\NodeBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getParents
     *
     * Get parent nodes
     *
     * @param string $id id identifying a domain model (required)
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return \Swagger\Client\Model\NodeResultSet
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getParents($id, $namespace, $type, $offset = null, $limit = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getParentsWithHttpInfo ($id, $namespace, $type, $offset, $limit);
        return $response; 
    }


    /**
     * getParentsWithHttpInfo
     *
     * Get parent nodes
     *
     * @param string $id id identifying a domain model (required)
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @return Array of \Swagger\Client\Model\NodeResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getParentsWithHttpInfo($id, $namespace, $type, $offset = null, $limit = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getParents');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling getParents');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling getParents');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}/parents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\NodeResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\NodeResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * replaceNode
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $id id identifying a domain model (required)
     * @param \Swagger\Client\Model\NodeBody $body node (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @return \Swagger\Client\Model\NodeBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function replaceNode($namespace, $id, $body, $type)
    {
        list($response, $statusCode, $httpHeader) = $this->replaceNodeWithHttpInfo ($namespace, $id, $body, $type);
        return $response; 
    }


    /**
     * replaceNodeWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $id id identifying a domain model (required)
     * @param \Swagger\Client\Model\NodeBody $body node (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @return Array of \Swagger\Client\Model\NodeBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function replaceNodeWithHttpInfo($namespace, $id, $body, $type)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceNode');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling replaceNode');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceNode');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling replaceNode');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\NodeBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\NodeBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * searchNodes
     *
     * Search nodes
     *
     * @param string $namespace_inc_global identifier namespacing the blueprint. `global` is a special namespace which references data from all blueprints in the call. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @param string[] $include comma separated list of elements to hydrate. Can include children, parents, nodes, and/or assets (optional)
     * @param string[] $filter_asset limit to nodes that have an asset matching type/code (optional)
     * @param string[] $filter_node_type type of nodes to return (optional)
     * @param string[] $filter_child limit to nodes with children matching type/code (optional)
     * @param string[] $filter_parent limit to nodes with parent matching type/code (optional)
     * @param string[] $filter_ancestor limit to nodes with ancestor matching type/code (optional)
     * @param string[] $filter_descendant limit to nodes with descendant matching type/code (optional)
     * @param bool $filter_has_assets limit to either nodes that have assets (true) nodes that have no assets (false) or omit to consider both nodes with and without assets (optional)
     * @param string[] $filter_asset_type type of asset to return. This filters the results by asset type, but returns all the assets associated with the result. (optional)
     * @param \DateTime $filter_from limit to results valid after this date, format is  ISO8601 date (optional)
     * @param \DateTime $filter_to limit to results valid before this date, format is  ISO8601 (optional)
     * @param string $q_node query term(s) to search for nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string $q_child query id/title terms to search for child nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string $q_parent query id/title terms to search for parent nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string $q_descendant query id/title terms to search for descendant nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string $q_ancestor query id/title terms to search for ancestor nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string[] $filter_asset_node limit to nodes that have an asset related to another node matching type/code (optional)
     * @return \Swagger\Client\Model\NodeResultSet
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function searchNodes($namespace_inc_global, $offset = null, $limit = null, $include = null, $filter_asset = null, $filter_node_type = null, $filter_child = null, $filter_parent = null, $filter_ancestor = null, $filter_descendant = null, $filter_has_assets = null, $filter_asset_type = null, $filter_from = null, $filter_to = null, $q_node = null, $q_child = null, $q_parent = null, $q_descendant = null, $q_ancestor = null, $filter_asset_node = null)
    {
        list($response, $statusCode, $httpHeader) = $this->searchNodesWithHttpInfo ($namespace_inc_global, $offset, $limit, $include, $filter_asset, $filter_node_type, $filter_child, $filter_parent, $filter_ancestor, $filter_descendant, $filter_has_assets, $filter_asset_type, $filter_from, $filter_to, $q_node, $q_child, $q_parent, $q_descendant, $q_ancestor, $filter_asset_node);
        return $response; 
    }


    /**
     * searchNodesWithHttpInfo
     *
     * Search nodes
     *
     * @param string $namespace_inc_global identifier namespacing the blueprint. `global` is a special namespace which references data from all blueprints in the call. (required)
     * @param Number $offset index to start result set from (optional)
     * @param Number $limit number of records to return (optional)
     * @param string[] $include comma separated list of elements to hydrate. Can include children, parents, nodes, and/or assets (optional)
     * @param string[] $filter_asset limit to nodes that have an asset matching type/code (optional)
     * @param string[] $filter_node_type type of nodes to return (optional)
     * @param string[] $filter_child limit to nodes with children matching type/code (optional)
     * @param string[] $filter_parent limit to nodes with parent matching type/code (optional)
     * @param string[] $filter_ancestor limit to nodes with ancestor matching type/code (optional)
     * @param string[] $filter_descendant limit to nodes with descendant matching type/code (optional)
     * @param bool $filter_has_assets limit to either nodes that have assets (true) nodes that have no assets (false) or omit to consider both nodes with and without assets (optional)
     * @param string[] $filter_asset_type type of asset to return. This filters the results by asset type, but returns all the assets associated with the result. (optional)
     * @param \DateTime $filter_from limit to results valid after this date, format is  ISO8601 date (optional)
     * @param \DateTime $filter_to limit to results valid before this date, format is  ISO8601 (optional)
     * @param string $q_node query term(s) to search for nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string $q_child query id/title terms to search for child nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string $q_parent query id/title terms to search for parent nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string $q_descendant query id/title terms to search for descendant nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string $q_ancestor query id/title terms to search for ancestor nodes.  Allows wildcard searching with &#39;*&#39; (optional)
     * @param string[] $filter_asset_node limit to nodes that have an asset related to another node matching type/code (optional)
     * @return Array of \Swagger\Client\Model\NodeResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function searchNodesWithHttpInfo($namespace_inc_global, $offset = null, $limit = null, $include = null, $filter_asset = null, $filter_node_type = null, $filter_child = null, $filter_parent = null, $filter_ancestor = null, $filter_descendant = null, $filter_has_assets = null, $filter_asset_type = null, $filter_from = null, $filter_to = null, $q_node = null, $q_child = null, $q_parent = null, $q_descendant = null, $q_ancestor = null, $filter_asset_node = null)
    {
        
        // verify the required parameter 'namespace_inc_global' is set
        if ($namespace_inc_global === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace_inc_global when calling searchNodes');
        }
  
        // parse inputs
        $resourcePath = "/{namespaceIncGlobal}/nodes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }// query params
        
        if (is_array($filter_asset)) {
            $filter_asset = $this->apiClient->getSerializer()->serializeCollection($filter_asset, 'csv', true);
        }
        
        if ($filter_asset !== null) {
            $queryParams['filter[asset]'] = $this->apiClient->getSerializer()->toQueryValue($filter_asset);
        }// query params
        
        if (is_array($filter_node_type)) {
            $filter_node_type = $this->apiClient->getSerializer()->serializeCollection($filter_node_type, 'csv', true);
        }
        
        if ($filter_node_type !== null) {
            $queryParams['filter[nodeType]'] = $this->apiClient->getSerializer()->toQueryValue($filter_node_type);
        }// query params
        
        if (is_array($filter_child)) {
            $filter_child = $this->apiClient->getSerializer()->serializeCollection($filter_child, 'csv', true);
        }
        
        if ($filter_child !== null) {
            $queryParams['filter[child]'] = $this->apiClient->getSerializer()->toQueryValue($filter_child);
        }// query params
        
        if (is_array($filter_parent)) {
            $filter_parent = $this->apiClient->getSerializer()->serializeCollection($filter_parent, 'csv', true);
        }
        
        if ($filter_parent !== null) {
            $queryParams['filter[parent]'] = $this->apiClient->getSerializer()->toQueryValue($filter_parent);
        }// query params
        
        if (is_array($filter_ancestor)) {
            $filter_ancestor = $this->apiClient->getSerializer()->serializeCollection($filter_ancestor, 'csv', true);
        }
        
        if ($filter_ancestor !== null) {
            $queryParams['filter[ancestor]'] = $this->apiClient->getSerializer()->toQueryValue($filter_ancestor);
        }// query params
        
        if (is_array($filter_descendant)) {
            $filter_descendant = $this->apiClient->getSerializer()->serializeCollection($filter_descendant, 'csv', true);
        }
        
        if ($filter_descendant !== null) {
            $queryParams['filter[descendant]'] = $this->apiClient->getSerializer()->toQueryValue($filter_descendant);
        }// query params
        
        if ($filter_has_assets !== null) {
            $queryParams['filter[hasAssets]'] = $this->apiClient->getSerializer()->toQueryValue($filter_has_assets);
        }// query params
        
        if (is_array($filter_asset_type)) {
            $filter_asset_type = $this->apiClient->getSerializer()->serializeCollection($filter_asset_type, 'csv', true);
        }
        
        if ($filter_asset_type !== null) {
            $queryParams['filter[assetType]'] = $this->apiClient->getSerializer()->toQueryValue($filter_asset_type);
        }// query params
        
        if ($filter_from !== null) {
            $queryParams['filter[from]'] = $this->apiClient->getSerializer()->toQueryValue($filter_from);
        }// query params
        
        if ($filter_to !== null) {
            $queryParams['filter[to]'] = $this->apiClient->getSerializer()->toQueryValue($filter_to);
        }// query params
        
        if ($q_node !== null) {
            $queryParams['q[node]'] = $this->apiClient->getSerializer()->toQueryValue($q_node);
        }// query params
        
        if ($q_child !== null) {
            $queryParams['q[child]'] = $this->apiClient->getSerializer()->toQueryValue($q_child);
        }// query params
        
        if ($q_parent !== null) {
            $queryParams['q[parent]'] = $this->apiClient->getSerializer()->toQueryValue($q_parent);
        }// query params
        
        if ($q_descendant !== null) {
            $queryParams['q[descendant]'] = $this->apiClient->getSerializer()->toQueryValue($q_descendant);
        }// query params
        
        if ($q_ancestor !== null) {
            $queryParams['q[ancestor]'] = $this->apiClient->getSerializer()->toQueryValue($q_ancestor);
        }// query params
        
        if (is_array($filter_asset_node)) {
            $filter_asset_node = $this->apiClient->getSerializer()->serializeCollection($filter_asset_node, 'csv', true);
        }
        
        if ($filter_asset_node !== null) {
            $queryParams['filter[asset.node]'] = $this->apiClient->getSerializer()->toQueryValue($filter_asset_node);
        }
        
        // path params
        
        if ($namespace_inc_global !== null) {
            $resourcePath = str_replace(
                "{" . "namespaceIncGlobal" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace_inc_global),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\NodeResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\NodeResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateNode
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $id id identifying a domain model (required)
     * @param \Swagger\Client\Model\NodeBody $body node (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @return \Swagger\Client\Model\NodeBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateNode($namespace, $id, $body, $type)
    {
        list($response, $statusCode, $httpHeader) = $this->updateNodeWithHttpInfo ($namespace, $id, $body, $type);
        return $response; 
    }


    /**
     * updateNodeWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $id id identifying a domain model (required)
     * @param \Swagger\Client\Model\NodeBody $body node (required)
     * @param string $type subtype of Node, e.g. &#39;modules&#39;, &#39;departments&#39;, etc. (required)
     * @return Array of \Swagger\Client\Model\NodeBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateNodeWithHttpInfo($namespace, $id, $body, $type)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling updateNode');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateNode');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateNode');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling updateNode');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/nodes/{type}/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }// path params
        
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\NodeBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\NodeBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
