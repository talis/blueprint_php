<?php
/**
 * IntegrationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * IntegrationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntegrationsApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost:10010/1');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return IntegrationsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * addIntegration
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param \Swagger\Client\Model\IntegrationBody $body integration (required)
     * @return \Swagger\Client\Model\IntegrationBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addIntegration($namespace, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->addIntegrationWithHttpInfo ($namespace, $body);
        return $response; 
    }


    /**
     * addIntegrationWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param \Swagger\Client\Model\IntegrationBody $body integration (required)
     * @return Array of \Swagger\Client\Model\IntegrationBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addIntegrationWithHttpInfo($namespace, $body)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling addIntegration');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addIntegration');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/integrations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\IntegrationBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\IntegrationBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\IntegrationBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteIntegration
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $integration_id id of an integration (required)
     * @param string $integration_type Type of external integration, e.g. &#39;lti1&#39; (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteIntegration($namespace, $integration_id, $integration_type)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteIntegrationWithHttpInfo ($namespace, $integration_id, $integration_type);
        return $response; 
    }


    /**
     * deleteIntegrationWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $integration_id id of an integration (required)
     * @param string $integration_type Type of external integration, e.g. &#39;lti1&#39; (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteIntegrationWithHttpInfo($namespace, $integration_id, $integration_type)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling deleteIntegration');
        }
        // verify the required parameter 'integration_id' is set
        if ($integration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $integration_id when calling deleteIntegration');
        }
        // verify the required parameter 'integration_type' is set
        if ($integration_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $integration_type when calling deleteIntegration');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/integrations/{integrationType}/{integrationId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($integration_id !== null) {
            $resourcePath = str_replace(
                "{" . "integrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($integration_id),
                $resourcePath
            );
        }// path params
        
        if ($integration_type !== null) {
            $resourcePath = str_replace(
                "{" . "integrationType" . "}",
                $this->apiClient->getSerializer()->toPathValue($integration_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getIntegration
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $integration_type Type of external integration, e.g. &#39;lti1&#39; (required)
     * @param string $integration_id id of an integration (required)
     * @return \Swagger\Client\Model\IntegrationBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIntegration($namespace, $integration_type, $integration_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getIntegrationWithHttpInfo ($namespace, $integration_type, $integration_id);
        return $response; 
    }


    /**
     * getIntegrationWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $integration_type Type of external integration, e.g. &#39;lti1&#39; (required)
     * @param string $integration_id id of an integration (required)
     * @return Array of \Swagger\Client\Model\IntegrationBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getIntegrationWithHttpInfo($namespace, $integration_type, $integration_id)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling getIntegration');
        }
        // verify the required parameter 'integration_type' is set
        if ($integration_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $integration_type when calling getIntegration');
        }
        // verify the required parameter 'integration_id' is set
        if ($integration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $integration_id when calling getIntegration');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/integrations/{integrationType}/{integrationId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($integration_type !== null) {
            $resourcePath = str_replace(
                "{" . "integrationType" . "}",
                $this->apiClient->getSerializer()->toPathValue($integration_type),
                $resourcePath
            );
        }// path params
        
        if ($integration_id !== null) {
            $resourcePath = str_replace(
                "{" . "integrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($integration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\IntegrationBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\IntegrationBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\IntegrationBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPost
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $integration_id id of an integration (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param string $asset_id id of an asset (required)
     * @param string $lti_message_type LTI launch data message type, must be &#39;basic-lti-launch-request&#39; (required)
     * @param string $lti_version LTI launch version, must be &#39;LTI-1p0&#39; (required)
     * @param string $resource_link_id LTI resource_link_id parameters (required)
     * @param string $oauth_consumer_key OAuth 1.0 consumer_key parameters (optional)
     * @param string $oauth_consumer_key2 OAuth 1.0 consumer_key parameters (optional)
     * @param string $oauth_signature_method OAuth 1.0 signature method, must be &#39;HMAC-SHA1&#39; (optional)
     * @param string $oauth_signature_method2 OAuth 1.0 signature method, must be &#39;HMAC-SHA1&#39; (optional)
     * @param int $oauth_timestamp OAuth 1.0 timestamp of request (optional)
     * @param int $oauth_timestamp2 OAuth 1.0 timestamp of request (optional)
     * @param Number $oauth_version OAuth 1.0 version, must be &#39;1.0&#39; (optional)
     * @param Number $oauth_version2 OAuth 1.0 version, must be &#39;1.0&#39; (optional)
     * @param string $oauth_nonce OAuth 1.0 Nonce (optional)
     * @param string $oauth_nonce2 OAuth 1.0 Nonce (optional)
     * @param string $oauth_signature OAuth 1.0 request signature (optional)
     * @param string $oauth_signature2 OAuth 1.0 request signature (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPost($namespace, $integration_id, $asset_type, $asset_id, $lti_message_type, $lti_version, $resource_link_id, $oauth_consumer_key = null, $oauth_consumer_key2 = null, $oauth_signature_method = null, $oauth_signature_method2 = null, $oauth_timestamp = null, $oauth_timestamp2 = null, $oauth_version = null, $oauth_version2 = null, $oauth_nonce = null, $oauth_nonce2 = null, $oauth_signature = null, $oauth_signature2 = null)
    {
        list($response, $statusCode, $httpHeader) = $this->namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPostWithHttpInfo ($namespace, $integration_id, $asset_type, $asset_id, $lti_message_type, $lti_version, $resource_link_id, $oauth_consumer_key, $oauth_consumer_key2, $oauth_signature_method, $oauth_signature_method2, $oauth_timestamp, $oauth_timestamp2, $oauth_version, $oauth_version2, $oauth_nonce, $oauth_nonce2, $oauth_signature, $oauth_signature2);
        return $response; 
    }


    /**
     * namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPostWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $integration_id id of an integration (required)
     * @param string $asset_type subtype of Asset, e.g. &#39;textbooks&#39;, &#39;digitisations&#39;, etc. (required)
     * @param string $asset_id id of an asset (required)
     * @param string $lti_message_type LTI launch data message type, must be &#39;basic-lti-launch-request&#39; (required)
     * @param string $lti_version LTI launch version, must be &#39;LTI-1p0&#39; (required)
     * @param string $resource_link_id LTI resource_link_id parameters (required)
     * @param string $oauth_consumer_key OAuth 1.0 consumer_key parameters (optional)
     * @param string $oauth_consumer_key2 OAuth 1.0 consumer_key parameters (optional)
     * @param string $oauth_signature_method OAuth 1.0 signature method, must be &#39;HMAC-SHA1&#39; (optional)
     * @param string $oauth_signature_method2 OAuth 1.0 signature method, must be &#39;HMAC-SHA1&#39; (optional)
     * @param int $oauth_timestamp OAuth 1.0 timestamp of request (optional)
     * @param int $oauth_timestamp2 OAuth 1.0 timestamp of request (optional)
     * @param Number $oauth_version OAuth 1.0 version, must be &#39;1.0&#39; (optional)
     * @param Number $oauth_version2 OAuth 1.0 version, must be &#39;1.0&#39; (optional)
     * @param string $oauth_nonce OAuth 1.0 Nonce (optional)
     * @param string $oauth_nonce2 OAuth 1.0 Nonce (optional)
     * @param string $oauth_signature OAuth 1.0 request signature (optional)
     * @param string $oauth_signature2 OAuth 1.0 request signature (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPostWithHttpInfo($namespace, $integration_id, $asset_type, $asset_id, $lti_message_type, $lti_version, $resource_link_id, $oauth_consumer_key = null, $oauth_consumer_key2 = null, $oauth_signature_method = null, $oauth_signature_method2 = null, $oauth_timestamp = null, $oauth_timestamp2 = null, $oauth_version = null, $oauth_version2 = null, $oauth_nonce = null, $oauth_nonce2 = null, $oauth_signature = null, $oauth_signature2 = null)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPost');
        }
        // verify the required parameter 'integration_id' is set
        if ($integration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $integration_id when calling namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPost');
        }
        // verify the required parameter 'asset_type' is set
        if ($asset_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_type when calling namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPost');
        }
        // verify the required parameter 'asset_id' is set
        if ($asset_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_id when calling namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPost');
        }
        // verify the required parameter 'lti_message_type' is set
        if ($lti_message_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lti_message_type when calling namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPost');
        }
        // verify the required parameter 'lti_version' is set
        if ($lti_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lti_version when calling namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPost');
        }
        // verify the required parameter 'resource_link_id' is set
        if ($resource_link_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resource_link_id when calling namespaceIntegrationsLti1IntegrationIdAssetsAssetTypeAssetIdPost');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/integrations/lti1/{integrationId}/assets/{assetType}/{assetId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('text/html'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/x-www-form-urlencoded'));
  
        
        // header params
        
        if ($oauth_consumer_key2 !== null) {
            $headerParams['oauth_consumer_key'] = $this->apiClient->getSerializer()->toHeaderValue($oauth_consumer_key2);
        }// header params
        
        if ($oauth_signature_method2 !== null) {
            $headerParams['oauth_signature_method'] = $this->apiClient->getSerializer()->toHeaderValue($oauth_signature_method2);
        }// header params
        
        if ($oauth_timestamp2 !== null) {
            $headerParams['oauth_timestamp'] = $this->apiClient->getSerializer()->toHeaderValue($oauth_timestamp2);
        }// header params
        
        if ($oauth_version2 !== null) {
            $headerParams['oauth_version'] = $this->apiClient->getSerializer()->toHeaderValue($oauth_version2);
        }// header params
        
        if ($oauth_nonce2 !== null) {
            $headerParams['oauth_nonce'] = $this->apiClient->getSerializer()->toHeaderValue($oauth_nonce2);
        }// header params
        
        if ($oauth_signature2 !== null) {
            $headerParams['oauth_signature'] = $this->apiClient->getSerializer()->toHeaderValue($oauth_signature2);
        }
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($integration_id !== null) {
            $resourcePath = str_replace(
                "{" . "integrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($integration_id),
                $resourcePath
            );
        }// path params
        
        if ($asset_type !== null) {
            $resourcePath = str_replace(
                "{" . "assetType" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_type),
                $resourcePath
            );
        }// path params
        
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                "{" . "assetId" . "}",
                $this->apiClient->getSerializer()->toPathValue($asset_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($lti_message_type !== null) {
            
            
            $formParams['lti_message_type'] = $this->apiClient->getSerializer()->toFormValue($lti_message_type);
            
        }// form params
        if ($lti_version !== null) {
            
            
            $formParams['lti_version'] = $this->apiClient->getSerializer()->toFormValue($lti_version);
            
        }// form params
        if ($resource_link_id !== null) {
            
            
            $formParams['resource_link_id'] = $this->apiClient->getSerializer()->toFormValue($resource_link_id);
            
        }// form params
        if ($oauth_consumer_key !== null) {
            
            
            $formParams['oauth_consumer_key'] = $this->apiClient->getSerializer()->toFormValue($oauth_consumer_key);
            
        }// form params
        if ($oauth_signature_method !== null) {
            
            
            $formParams['oauth_signature_method'] = $this->apiClient->getSerializer()->toFormValue($oauth_signature_method);
            
        }// form params
        if ($oauth_timestamp !== null) {
            
            
            $formParams['oauth_timestamp'] = $this->apiClient->getSerializer()->toFormValue($oauth_timestamp);
            
        }// form params
        if ($oauth_version !== null) {
            
            
            $formParams['oauth_version'] = $this->apiClient->getSerializer()->toFormValue($oauth_version);
            
        }// form params
        if ($oauth_nonce !== null) {
            
            
            $formParams['oauth_nonce'] = $this->apiClient->getSerializer()->toFormValue($oauth_nonce);
            
        }// form params
        if ($oauth_signature !== null) {
            
            
            $formParams['oauth_signature'] = $this->apiClient->getSerializer()->toFormValue($oauth_signature);
            
        }
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * replaceIntegration
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $integration_id id of an integration (required)
     * @param string $integration_type Type of external integration, e.g. &#39;lti1&#39; (required)
     * @param \Swagger\Client\Model\IntegrationBody $body integration (required)
     * @return \Swagger\Client\Model\IntegrationBody
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function replaceIntegration($namespace, $integration_id, $integration_type, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->replaceIntegrationWithHttpInfo ($namespace, $integration_id, $integration_type, $body);
        return $response; 
    }


    /**
     * replaceIntegrationWithHttpInfo
     *
     * 
     *
     * @param string $namespace identifier namespacing the blueprint. It must start with a letter or underscore and can only be followed by letters, numbers and underscores. (required)
     * @param string $integration_id id of an integration (required)
     * @param string $integration_type Type of external integration, e.g. &#39;lti1&#39; (required)
     * @param \Swagger\Client\Model\IntegrationBody $body integration (required)
     * @return Array of \Swagger\Client\Model\IntegrationBody, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function replaceIntegrationWithHttpInfo($namespace, $integration_id, $integration_type, $body)
    {
        
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling replaceIntegration');
        }
        // verify the required parameter 'integration_id' is set
        if ($integration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $integration_id when calling replaceIntegration');
        }
        // verify the required parameter 'integration_type' is set
        if ($integration_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $integration_type when calling replaceIntegration');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling replaceIntegration');
        }
  
        // parse inputs
        $resourcePath = "/{namespace}/integrations/{integrationType}/{integrationId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/vnd.api+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($namespace !== null) {
            $resourcePath = str_replace(
                "{" . "namespace" . "}",
                $this->apiClient->getSerializer()->toPathValue($namespace),
                $resourcePath
            );
        }// path params
        
        if ($integration_id !== null) {
            $resourcePath = str_replace(
                "{" . "integrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($integration_id),
                $resourcePath
            );
        }// path params
        
        if ($integration_type !== null) {
            $resourcePath = str_replace(
                "{" . "integrationType" . "}",
                $this->apiClient->getSerializer()->toPathValue($integration_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\IntegrationBody'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\IntegrationBody', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\IntegrationBody', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Errors', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
