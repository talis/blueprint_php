<?php
/**
 * NodeAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * NodeAttributes Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NodeAttributes implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'title' => 'string',
        'description' => 'string',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime',
        'student_numbers' => 'Number',
        'domain_ids' => 'string[]',
        'reminder_date' => '\DateTime',
        'deadline' => '\DateTime'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'title' => 'title',
        'description' => 'description',
        'valid_from' => 'valid_from',
        'valid_to' => 'valid_to',
        'student_numbers' => 'studentNumbers',
        'domain_ids' => 'domain_ids',
        'reminder_date' => 'reminder_date',
        'deadline' => 'deadline'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'title' => 'setTitle',
        'description' => 'setDescription',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'student_numbers' => 'setStudentNumbers',
        'domain_ids' => 'setDomainIds',
        'reminder_date' => 'setReminderDate',
        'deadline' => 'setDeadline'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'title' => 'getTitle',
        'description' => 'getDescription',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'student_numbers' => 'getStudentNumbers',
        'domain_ids' => 'getDomainIds',
        'reminder_date' => 'getReminderDate',
        'deadline' => 'getDeadline'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $title 
      * @var string
      */
    protected $title;
    
    /**
      * $description A more detailed description of the node
      * @var string
      */
    protected $description;
    
    /**
      * $valid_from The node is judged invalid before this date. Should be an ISO8601 date
      * @var \DateTime
      */
    protected $valid_from;
    
    /**
      * $valid_to The node is judged invalid after this date. Should be an ISO8601 date
      * @var \DateTime
      */
    protected $valid_to;
    
    /**
      * $student_numbers 
      * @var Number
      */
    protected $student_numbers;
    
    /**
      * $domain_ids Additional identifiers linked to the external domain of the hierarchy, for example JACS code. Allows comparisons between hierarchies.
      * @var string[]
      */
    protected $domain_ids;
    
    /**
      * $reminder_date Reminder date for redemption period nodes, should be an ISO8601 date. Drop if we can get additionalProperties working.
      * @var \DateTime
      */
    protected $reminder_date;
    
    /**
      * $deadline Deadline date for redemption period nodes, should be an ISO8601 date. Drop if we can get additionalProperties working.
      * @var \DateTime
      */
    protected $deadline;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->title = $data["title"];
            $this->description = $data["description"];
            $this->valid_from = $data["valid_from"];
            $this->valid_to = $data["valid_to"];
            $this->student_numbers = $data["student_numbers"];
            $this->domain_ids = $data["domain_ids"];
            $this->reminder_date = $data["reminder_date"];
            $this->deadline = $data["deadline"];
        }
    }
    
    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
  
    /**
     * Sets title
     * @param string $title 
     * @return $this
     */
    public function setTitle($title)
    {
        
        $this->title = $title;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description A more detailed description of the node
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets valid_from
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->valid_from;
    }
  
    /**
     * Sets valid_from
     * @param \DateTime $valid_from The node is judged invalid before this date. Should be an ISO8601 date
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        
        $this->valid_from = $valid_from;
        return $this;
    }
    
    /**
     * Gets valid_to
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->valid_to;
    }
  
    /**
     * Sets valid_to
     * @param \DateTime $valid_to The node is judged invalid after this date. Should be an ISO8601 date
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        
        $this->valid_to = $valid_to;
        return $this;
    }
    
    /**
     * Gets student_numbers
     * @return Number
     */
    public function getStudentNumbers()
    {
        return $this->student_numbers;
    }
  
    /**
     * Sets student_numbers
     * @param Number $student_numbers 
     * @return $this
     */
    public function setStudentNumbers($student_numbers)
    {
        
        $this->student_numbers = $student_numbers;
        return $this;
    }
    
    /**
     * Gets domain_ids
     * @return string[]
     */
    public function getDomainIds()
    {
        return $this->domain_ids;
    }
  
    /**
     * Sets domain_ids
     * @param string[] $domain_ids Additional identifiers linked to the external domain of the hierarchy, for example JACS code. Allows comparisons between hierarchies.
     * @return $this
     */
    public function setDomainIds($domain_ids)
    {
        
        $this->domain_ids = $domain_ids;
        return $this;
    }
    
    /**
     * Gets reminder_date
     * @return \DateTime
     */
    public function getReminderDate()
    {
        return $this->reminder_date;
    }
  
    /**
     * Sets reminder_date
     * @param \DateTime $reminder_date Reminder date for redemption period nodes, should be an ISO8601 date. Drop if we can get additionalProperties working.
     * @return $this
     */
    public function setReminderDate($reminder_date)
    {
        
        $this->reminder_date = $reminder_date;
        return $this;
    }
    
    /**
     * Gets deadline
     * @return \DateTime
     */
    public function getDeadline()
    {
        return $this->deadline;
    }
  
    /**
     * Sets deadline
     * @param \DateTime $deadline Deadline date for redemption period nodes, should be an ISO8601 date. Drop if we can get additionalProperties working.
     * @return $this
     */
    public function setDeadline($deadline)
    {
        
        $this->deadline = $deadline;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
