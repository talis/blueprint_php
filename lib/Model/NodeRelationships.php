<?php
/**
 * NodeRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * NodeRelationships Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NodeRelationships implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'children' => '\Swagger\Client\Model\NodeRelationship',
        'parents' => '\Swagger\Client\Model\NodeRelationship',
        'assets' => '\Swagger\Client\Model\AssetRelationship',
        'namespace' => '\Swagger\Client\Model\NamespaceRelationship'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'children' => 'children',
        'parents' => 'parents',
        'assets' => 'assets',
        'namespace' => 'namespace'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'children' => 'setChildren',
        'parents' => 'setParents',
        'assets' => 'setAssets',
        'namespace' => 'setNamespace'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'children' => 'getChildren',
        'parents' => 'getParents',
        'assets' => 'getAssets',
        'namespace' => 'getNamespace'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $children 
      * @var \Swagger\Client\Model\NodeRelationship
      */
    protected $children;
    
    /**
      * $parents 
      * @var \Swagger\Client\Model\NodeRelationship
      */
    protected $parents;
    
    /**
      * $assets 
      * @var \Swagger\Client\Model\AssetRelationship
      */
    protected $assets;
    
    /**
      * $namespace 
      * @var \Swagger\Client\Model\NamespaceRelationship
      */
    protected $namespace;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->children = $data["children"];
            $this->parents = $data["parents"];
            $this->assets = $data["assets"];
            $this->namespace = $data["namespace"];
        }
    }
    
    /**
     * Gets children
     * @return \Swagger\Client\Model\NodeRelationship
     */
    public function getChildren()
    {
        return $this->children;
    }
  
    /**
     * Sets children
     * @param \Swagger\Client\Model\NodeRelationship $children 
     * @return $this
     */
    public function setChildren($children)
    {
        
        $this->children = $children;
        return $this;
    }
    
    /**
     * Gets parents
     * @return \Swagger\Client\Model\NodeRelationship
     */
    public function getParents()
    {
        return $this->parents;
    }
  
    /**
     * Sets parents
     * @param \Swagger\Client\Model\NodeRelationship $parents 
     * @return $this
     */
    public function setParents($parents)
    {
        
        $this->parents = $parents;
        return $this;
    }
    
    /**
     * Gets assets
     * @return \Swagger\Client\Model\AssetRelationship
     */
    public function getAssets()
    {
        return $this->assets;
    }
  
    /**
     * Sets assets
     * @param \Swagger\Client\Model\AssetRelationship $assets 
     * @return $this
     */
    public function setAssets($assets)
    {
        
        $this->assets = $assets;
        return $this;
    }
    
    /**
     * Gets namespace
     * @return \Swagger\Client\Model\NamespaceRelationship
     */
    public function getNamespace()
    {
        return $this->namespace;
    }
  
    /**
     * Sets namespace
     * @param \Swagger\Client\Model\NamespaceRelationship $namespace 
     * @return $this
     */
    public function setNamespace($namespace)
    {
        
        $this->namespace = $namespace;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
